
pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/pavithra-m13/Docker_terraform_Pipeline.git'
        IMAGE_NAME = 'my-apache'
        CONTAINER_NAME = 'apache-container'
        APACHE_PORT = '8081'
        SONARQUBE_URL = 'http://172.27.222.147:9000'  
        SONARQUBE_PROJECT_KEY = 'pavithra'
        SONARQUBE_PROJECT_NAME = 'pavithra'
        SONARQUBE_ENV = 'sonar-qube'
   
    }


    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning Git Repository...'
                git branch: 'master', url: REPO_URL
            }
        }

         stage('SonarQube Analysis') {
                    steps {
                        withSonarQubeEnv("${SONARQUBE_ENV}") {
                            withCredentials([string(credentialsId: 'pavithra', variable: 'SONAR_TOKEN')]) {
                                sh 'sonar-scanner -Dsonar.projectKey=pavithra -Dsonar.sources=. -Dsonar.login=$SONAR_TOKEN'
                            }
                        }
                    }
                }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') { // Optional: timeout if quality gate takes too long
                script {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to Quality Gate failure: ${qg.status}"
                    }
                }
            }
        }
    }
        stage('Build Docker Image') {
            steps {
                echo 'Building Apache Docker Image...'
                sh '''
                    docker build -t ${IMAGE_NAME} .
                '''
            }
        }

        stage('Run Apache Container') {
            steps {
                echo 'Stopping and removing any existing Apache container...'
                sh '''
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                '''
                
                echo 'Starting Apache container from the built image...'
                sh '''
                    docker run -d --name ${CONTAINER_NAME} -p ${APACHE_PORT}:80 ${IMAGE_NAME}
                '''
            }
        }
    }

    post {
        success {
            echo 'Deployment Successful! Website is available at http://localhost:${APACHE_PORT}'
        }
        failure {
            echo 'Deployment Failed! Check the logs for details.'
        }
    }
}
